:py:mod:`cattle_lca.resource_manager.models`
============================================

.. py:module:: cattle_lca.resource_manager.models

.. autoapi-nested-parse::

   Models Module
   -------------

   This module contains classes for representing and manipulating dynamic data structures used in livestock data management, specifically for lifecycle assessment in cattle farming. It includes classes for handling animal data, emissions factors, grass data, concentrate data, and upstream data.

   Classes:
       DynamicData: A base class for creating objects that hold dynamic data.
       AnimalCategory: Represents different categories of animals on a farm, inheriting from DynamicData.
       AnimalCollection: Represents a collection of animal categories, inheriting from DynamicData.
       Farm: Represents a farm entity, inheriting from DynamicData.
       Animal_Features: Contains all features related to animals used in lifecycle assessment.
       Emissions_Factors: Holds emissions factors data relevant to lifecycle assessment.
       Grass: Contains data about different types of grasses.
       Concentrate: Contains data about different types of animal feed concentrates.
       Upstream: Contains upstream data such as resources used and emissions released before reaching the farm.

   Functions:
       load_grass_data(): Loads and returns grass data.
       load_concentrate_data(): Loads and returns concentrate data.
       load_upstream_data(): Loads and returns upstream data.
       load_emissions_factors_data(): Loads and returns emissions factors data.
       load_animal_features_data(): Loads and returns animal features data.
       load_farm_data(farm_data_frame): Takes a DataFrame and returns a dictionary of Farm objects.
       load_livestock_data(animal_data_frame): Takes a DataFrame and returns a dictionary of AnimalCollection objects mapped by farm ID.
       print_livestock_data(data): Utility function to print livestock data for debugging or logging.

   The classes mainly serve as containers for the data loaded from external sources like databases or CSV files, enabling structured access and manipulation of this data within the lifecycle assessment processes.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cattle_lca.resource_manager.models.DynamicData
   cattle_lca.resource_manager.models.AnimalCategory
   cattle_lca.resource_manager.models.AnimalCollection
   cattle_lca.resource_manager.models.Farm
   cattle_lca.resource_manager.models.Animal_Features
   cattle_lca.resource_manager.models.Emissions_Factors
   cattle_lca.resource_manager.models.Grass
   cattle_lca.resource_manager.models.Concentrate
   cattle_lca.resource_manager.models.Upstream



Functions
~~~~~~~~~

.. autoapisummary::

   cattle_lca.resource_manager.models.load_grass_data
   cattle_lca.resource_manager.models.load_concentrate_data
   cattle_lca.resource_manager.models.load_upstream_data
   cattle_lca.resource_manager.models.load_emissions_factors_data
   cattle_lca.resource_manager.models.load_animal_features_data
   cattle_lca.resource_manager.models.load_farm_data
   cattle_lca.resource_manager.models.load_livestock_data
   cattle_lca.resource_manager.models.print_livestock_data



.. py:class:: DynamicData(data, defaults={})


   Bases: :py:obj:`object`

   A base class for creating dynamic data objects. This class is designed to create instances with attributes
   that are dynamically assigned based on input data. It allows for the easy creation and manipulation of
   data objects without needing a predefined class structure.

   Attributes are set based on two inputs: a defaults dictionary and a data dictionary. The defaults dictionary
   provides initial values for attributes, ensuring that the object has all necessary attributes with default values.
   The data dictionary contains actual values meant to override these defaults where applicable.

   :param data: A dictionary containing actual values for attributes of the instance. Keys correspond to attribute
                names, and values correspond to the values those attributes should take.
   :type data: dict
   :param defaults: A dictionary containing default values for attributes of the instance. Keys
                    correspond to attribute names, and values are the default values those attributes
                    should take. Defaults to an empty dictionary if not provided.
   :type defaults: dict, optional


.. py:class:: AnimalCategory(data)


   Bases: :py:obj:`DynamicData`

   A specialized data container class for animal categories, extending DynamicData. This class is designed
   to store and manage information specific to different types of animals.
   It predefines a set of attributes with default values relevant to animal data management.

   Inherits from:
       DynamicData: Inherits the capability to dynamically set attributes based on input data.

   Default Attributes (and their default values):
       pop (int): Population count of the animals in this category (default: 0).
       daily_milk (float): Average daily milk production per animal, in litres (default: 0.0).
       weight (float): Average weight per animal, in kilograms (default: 0.0).
       forage (str): Type of forage consumed by the animals (default: 'average').
       grazing (str): Type of grazing condition (default: 'pasture').
       con_type (str): Type of concentrate feed provided (default: 'concentrate').
       con_amount (float): Amount of concentrate feed provided per day, in kilograms (default: 0.0).
       t_outdoors (int): Average time spent outdoors per day, in hours (default: 24).
       t_indoors (int): Average time spent indoors per day, in hours (default: 0).
       t_stabled (int): Average time spent in stable conditions per day, in hours (default: 0).
       mm_storage (str): Type of manure management storage system (default: 'solid').
       daily_spreading (str): Type of manure spreading technique used daily (default: 'none').
       n_sold (int): Number of animals sold from this category (default: 0).
       n_bought (int): Number of animals bought into this category (default: 0).

   :param data: A dictionary containing actual values for attributes of the animal category. Keys correspond
                to attribute names, and values correspond to the values those attributes should take.
   :type data: dict


.. py:class:: AnimalCollection(data)


   Bases: :py:obj:`DynamicData`

   A data container class for a collection of animal categories. It extends the
   DynamicData class to enable dynamic attribute assignment based on input data, typically used to represent a group
   of animals categorized by species, age, or other criteria.

   Inherits from:
       DynamicData: Inherits the capability to dynamically set attributes based on input data.

   :param data: A dictionary where keys represent category names or identifiers, and values are instances of
                AnimalCategory or similar data structures that hold information specific to each animal group.
   :type data: dict


.. py:class:: Farm(data)


   Bases: :py:obj:`DynamicData`

   A data container class representing a "farm", or similar unit, extending the DynamicData class to enable dynamic attribute assignment
   based on input data. This class is typically used to encapsulate all relevant information about a "farm", including
   details about various animal collections, resources, and management practices.

   Inherits from:
       DynamicData: Inherits the capability to dynamically set attributes based on input data.

   :param data: A dictionary containing attributes and values that represent various aspects of the farm. This
                can include information such as the farm's ID, location, size, and any specific animal collections
                associated with the farm.
   :type data: dict


.. py:class:: Animal_Features(data)


   Bases: :py:obj:`object`

   A class that encapsulates various features and statistical data related to different categories of farm animals.
   This class is designed to store and provide access to a wide array of information concerning animal characteristics,
   such as weight gain, nitrogen retention, and mature weight for different animal categories like dairy cows,
   suckler cows, bulls, and various calf types.

   .. attribute:: data_frame

      A DataFrame containing animal features data.

      :type: pandas.DataFrame

   .. attribute:: animal_features

      A dictionary storing all the animal features with keys representing the feature names
      and values representing the corresponding data extracted from the DataFrame.

      :type: dict

   :param data: The DataFrame containing the animal features data. Expected to contain columns such as
                'birth_weight', 'mature_weight_bulls', 'dairy_cows_weight_gain', etc., with each row
                representing a different set of animal feature values.
   :type data: pandas.DataFrame

   .. method:: Various getter methods for each animal feature, such as get_birth_weight(), get_mature_weight_bulls(), etc.,

      

   .. method:: which return the respective values from the animal_features dictionary.

      
      

   Usage:
       # Assuming animal_features_df is a pandas DataFrame containing the relevant animal features data
       animal_features = Animal_Features(animal_features_df)
       mature_weight = animal_features.get_mature_weight_dairy_cows()

   .. py:method:: get_birth_weight()

      Get the birth weight of the animals.

      :returns: The birth weight of the animals.
      :rtype: float


   .. py:method:: get_mature_weight_bulls()

      Get the mature weight of bulls.

      :returns: The mature weight of bulls.
      :rtype: float


   .. py:method:: get_mature_weight_dairy_cows()

      Get the mature weight of dairy cows.

      :returns: The mature weight of dairy cows.
      :rtype: float


   .. py:method:: get_mature_weight_suckler_cows()

      Get the mature weight of suckler cows.

      :returns: The mature weight of suckler cows.
      :rtype: float


   .. py:method:: get_dairy_cows_weight_gain()

      Get the weight gain of dairy cows.

      :returns: The weight gain of dairy cows.
      :rtype: float


   .. py:method:: get_suckler_cows_weight_gain()

      Get the weight gain of suckler cows.

      :returns: The weight gain of suckler cows.
      :rtype: float


   .. py:method:: get_DxD_calves_m_weight_gain()

      Get the weight gain of DxD male calves.

      :returns: The weight gain of dairy male calves.
      :rtype: float


   .. py:method:: get_DxD_calves_f_weight_gain()

      Get the weight gain of DxD female calves.

      :returns: The weight gain of dairy female calves.
      :rtype: float


   .. py:method:: get_DxB_calves_m_weight_gain()

      Get the weight gain of DxB male calves.

      :returns: The weight gain of dairy-beef male calves.
      :rtype: float


   .. py:method:: get_DxB_calves_f_weight_gain()

      Get the weight gain of DxB female calves.

      :returns: The weight gain of dairy-beef female calves.
      :rtype: float


   .. py:method:: get_BxB_calves_m_weight_gain()

      Get the weight gain of BxB male calves.

      :returns: The weight gain of suckler beef male calves.
      :rtype: float


   .. py:method:: get_BxB_calves_f_weight_gain()

      Get the weight gain of BxB female calves.

      :returns: The weight gain of suckler beef female calves.
      :rtype: float


   .. py:method:: get_DxD_heifers_less_2_yr_weight_gain()

      Get the weight gain of DxD heifers less than 2 years old.

      :returns: The weight gain of dairy heifers less than 2 years old.
      :rtype: float


   .. py:method:: get_DxD_steers_less_2_yr_weight_gain()

      Get the weight gain of DxD steers less than 2 years old.

      :returns: The weight gain of dairy steers less than 2 years old.
      :rtype: float


   .. py:method:: get_DxB_heifers_less_2_yr_weight_gain()

      Get the weight gain of DxB heifers less than 2 years old.

      :returns: The weight gain of dairy-beef heifers less than 2 years old.
      :rtype: float


   .. py:method:: get_DxB_steers_less_2_yr_weight_gain()

      Get the weight gain of DxB steers less than 2 years old.

      :returns: The weight gain of dairy-beef steers less than 2 years old.
      :rtype: float


   .. py:method:: get_BxB_heifers_less_2_yr_weight_gain()

      Get the weight gain of BxB heifers less than 2 years old.

      :returns: The weight gain of suckler beef heifers less than 2 years old.
      :rtype: float


   .. py:method:: get_BxB_steers_less_2_yr_weight_gain()

      Get the weight gain of BxB steers less than 2 years old.

      :returns: The weight gain of suckler beef steers less than 2 years old.
      :rtype: float


   .. py:method:: get_DxD_heifers_more_2_yr_weight_gain()

      Get the weight gain of DxD heifers more than 2 years old.

      :returns: The weight gain of dairy heifers more than 2 years old.
      :rtype: float


   .. py:method:: get_DxD_steers_more_2_yr_weight_gain()

      Get the weight gain of DxD steers more than 2 years old.

      :returns: The weight gain of dairy steers more than 2 years old.
      :rtype: float


   .. py:method:: get_DxB_heifers_more_2_yr_weight_gain()

      Get the weight gain of DxB heifers more than 2 years old.

      :returns: The weight gain of dairy-beef heifers more than 2 years old.
      :rtype: float


   .. py:method:: get_DxB_steers_more_2_yr_weight_gain()

      Get the weight gain of DxB steers more than 2 years old.

      :returns: The weight gain of dairy-beef steers more than 2 years old.
      :rtype: float


   .. py:method:: get_BxB_heifers_more_2_yr_weight_gain()

      Get the weight gain of BxB heifers more than 2 years old.

      :returns: The weight gain of suckler beef heifers more than 2 years old.
      :rtype: float


   .. py:method:: get_BxB_steers_more_2_yr_weight_gain()

      Get the weight gain of BxB steers more than 2 years old.

      :returns: The weight gain of suckler beef steers more than 2 years old.
      :rtype: float


   .. py:method:: get_bulls_weight_gain()

      Get the weight gain of bulls.

      :returns: The weight gain of bulls.
      :rtype: float


   .. py:method:: get_dairy_cows_n_retention()

      Get the nitrogen retention of dairy cows.

      :returns: The nitrogen retention of dairy cows.
      :rtype: float


   .. py:method:: get_suckler_cows_n_retention()

      Get the nitrogen retention of suckler cows.

      :returns: The nitrogen retention of suckler cows.
      :rtype: float


   .. py:method:: get_DxD_calves_m_n_retention()

      Get the nitrogen retention of DxD male calves

      :returns: The nitrogen retention of male dairy calves.
      :rtype: float


   .. py:method:: get_DxD_calves_f_n_retention()

      Get the nitrogen retention of DxD female calves.

      :returns: The nitrogen retention female dairy calves.
      :rtype: float


   .. py:method:: get_DxB_calves_m_n_retention()

      Get the nitrogen retention of DxB male calves.

      :returns: The nitrogen retention dairy-beef male calves.
      :rtype: float


   .. py:method:: get_DxB_calves_f_n_retention()

      Get the nitrogen retention of DxB female calves.

      :returns: The nitrogen retention dairy-beef female calves.
      :rtype: float


   .. py:method:: get_BxB_calves_m_n_retention()

      Get the nitrogen retention of BxB male calves.

      :returns: The nitrogen retention suckler beef male calves.
      :rtype: float


   .. py:method:: get_BxB_calves_f_n_retention()

      Get the nitrogen retention of BxB female calves.

      :returns: The nitrogen retention of suckler beef female calves.
      :rtype: float


   .. py:method:: get_DxD_heifers_less_2_yr_n_retention()

      Get the nitrogen retention of DxD heifers less than 2 years old.

      :returns: The nitrogen retention of dairy heifers less than 2 years old.
      :rtype: float


   .. py:method:: get_DxD_steers_less_2_yr_n_retention()

      Get the nitrogen retention of DxD steers less than 2 years old.

      :returns: The nitrogen retention of dairy steers less than 2 years old.
      :rtype: float


   .. py:method:: get_DxB_heifers_less_2_yr_n_retention()

      Get the nitrogen retention of DxB heifers less than 2 years old.

      :returns: The nitrogen retention of dairy-beef heifers less than 2 years old.
      :rtype: float


   .. py:method:: get_DxB_steers_less_2_yr_n_retention()

      Get the nitrogen retention of DxB steers less than 2 years old.

      :returns: The nitrogen retention of dairy-beef steers less than 2 years old.
      :rtype: float


   .. py:method:: get_BxB_heifers_less_2_yr_n_retention()

      Get the nitrogen retention of BxB heifers less than 2 years old.

      :returns: The nitrogen retention of suckler beef heifers less than 2 years old.
      :rtype: float


   .. py:method:: get_BxB_steers_less_2_yr_n_retention()

      Get the nitrogen retention of BxB steers less than 2 years old.

      :returns: The nitrogen retention of suckler beef steers less than 2 years old.
      :rtype: float


   .. py:method:: get_DxD_heifers_more_2_yr_n_retention()

      Get the nitrogen retention of DxD heifers more than 2 years old.

      :returns: The nitrogen retention of dairy heifers more than 2 years old.
      :rtype: float


   .. py:method:: get_DxD_steers_more_2_yr_n_retention()

      Get the nitrogen retention of DxD steers more than 2 years old.

      :returns: The nitrogen retention of dairy steers more than 2 years old.
      :rtype: float


   .. py:method:: get_DxB_heifers_more_2_yr_n_retention()

      Get the nitrogen retention of DxB heifers more than 2 years old.

      :returns: The nitrogen retention of dairy-beef heifers more than 2 years old.
      :rtype: float


   .. py:method:: get_DxB_steers_more_2_yr_n_retention()

      Get the nitrogen retention of DxB steers more than 2 years old.

      :returns: The nitrogen retention of dairy-beef steers more than 2 years old.
      :rtype: float


   .. py:method:: get_BxB_heifers_more_2_yr_n_retention()

      Get the nitrogen retention of BxB heifers more than 2 years old.

      :returns: The nitrogen retention of suckler beef heifers more than 2 years old.
      :rtype: float


   .. py:method:: get_BxB_steers_more_2_yr_n_retention()

      Get the nitrogen retention of BxB steers more than 2 years old.

      :returns: The nitrogen retention of suckler beef steers more than 2 years old.
      :rtype: float


   .. py:method:: get_bulls_n_retention()

      Get the nitrogen retention of bulls.

      :returns: The nitrogen retention of bulls.
      :rtype: float


   .. py:method:: get_data()

      Get the DataFrame containing the animal features data.

      :returns: The DataFrame containing the animal features data.
      :rtype: pandas.DataFrame


   .. py:method:: is_loaded()

      Check if the animal features data has been successfully loaded.

      :returns: True if the data has been loaded, False otherwise.
      :rtype: bool



.. py:class:: Emissions_Factors(data)


   Bases: :py:obj:`object`

   A class that encapsulates emissions factor data for various elements related to livestock farming. This includes
   factors for methane production, nitrogen emissions, and energy use among others. The class provides methods to
   retrieve specific emissions factors based on livestock types and activities.

   .. attribute:: data_frame

      A DataFrame containing all the emissions factors data.

      :type: pandas.DataFrame

   .. attribute:: emissions_factors

      A dictionary mapping emissions factor names to their values.

      :type: dict

   :param data: The DataFrame containing emissions factors data. Each row represents a different
                set of factors and includes columns for each type of emissions factor.
   :type data: pandas.DataFrame

   .. method:: Each 'get' method corresponds to a specific type of emissions factor, allowing for easy retrieval of data

      

   .. method:: for use in calculations. For example, get_ef_net_energy_for_maintenance_non_lactating_cow() returns the

      

   .. method:: energy required for maintenance of non-lactating cows.

      
      
      

   .. py:method:: get_ef_net_energy_for_maintenance_non_lactating_cow()

      Get the net energy required for maintenance of non-lactating cows.

      :returns: The net energy required for maintenance of non-lactating cows.
      :rtype: float


   .. py:method:: get_ef_net_energy_for_maintenance_lactating_cow()

      Get the net energy required for maintenance of lactating cows.

      :returns: The net energy required for maintenance of lactating cows.
      :rtype: float


   .. py:method:: get_ef_net_energy_for_maintenance_bulls()

      Get the net energy required for maintenance of bulls.

      :returns: The net energy required for maintenance of bulls.
      :rtype: float


   .. py:method:: get_ef_feeding_situation_pasture()

      Get the coefficient for feeding situations on pasture.

      :returns: The coefficient for feeding situations on pasture.
      :rtype: float


   .. py:method:: get_ef_feeding_situation_large_area()

      Get the coefficientfor feeding situations on large areas.

      :returns: The coefficient for feeding situations on large areas.
      :rtype: float


   .. py:method:: get_ef_feeding_situation_stall()

      Get the coefficient for feeding situations in stalls.

      :returns: The coefficient for feeding situations in stalls.
      :rtype: float


   .. py:method:: get_ef_net_energy_for_growth_females()

      Get the net energy required for growth females.

      :returns: The net energy required for growth for females
      :rtype: float


   .. py:method:: get_ef_net_energy_for_growth_castrates()

      Get the net energy required for growth of castrates.

      :returns: The net energy required for growth of castrates.
      :rtype: float


   .. py:method:: get_ef_net_energy_for_growth_bulls()

      Get the net energy required for growth of bulls.

      :returns: The net energy required for growth of bulls.
      :rtype: float


   .. py:method:: get_ef_net_energy_for_pregnancy()

      Get the net energy required for pregnancy.

      :returns: The net energy required for pregnancy.
      :rtype: float


   .. py:method:: get_ef_methane_conversion_factor_dairy_cow()

      Get the methane conversion factor for dairy cows.

      :returns: The methane conversion factor for dairy cows.
      :rtype: float


   .. py:method:: get_ef_methane_conversion_factor_steer()

      Get the methane conversion factor for steers.

      :returns: The methane conversion factor for steers.
      :rtype: float


   .. py:method:: get_ef_methane_conversion_factor_calves()

      Get the methane conversion factor for calves.

      :returns: The methane conversion factor for calves.
      :rtype: float


   .. py:method:: get_ef_methane_conversion_factor_bulls()

      Get the methane conversion factor for bulls.

      :returns: The methane conversion factor for bulls.
      :rtype: float


   .. py:method:: get_ef_fracGASM_total_ammonia_nitrogen_pasture_range_paddock_deposition()

      Get the emissions factor for total ammonia nitrogen pasture range paddock deposition.

      :returns: The emissions factor for total ammonia nitrogen pasture range paddock deposition.
      :rtype: float


   .. py:method:: get_ef_cpp_pasture_range_paddock_for_dairy_and_non_dairy_direct_n2o()

      Get the emissions factor for pasture range paddock for dairy and non-dairy direct N2O.

      :returns: The emissions factor for pasture range paddock for dairy and non-dairy direct N2O.
      :rtype: float


   .. py:method:: get_ef_direct_n2o_emissions_soils()

      Get the emissions factor for direct N2O emissions from soils.

      :returns: The emissions factor for direct N2O emissions from soils.
      :rtype: float


   .. py:method:: get_ef_indirect_n2o_atmospheric_deposition_to_soils_and_water()

      Get the emissions factor for indirect N2O atmospheric deposition to soils and water.

      :returns: The emissions factor for indirect N2O atmospheric deposition to soils and water.
      :rtype: float


   .. py:method:: get_ef_indirect_n2o_from_leaching_and_runoff()

      Get the emissions factor for indirect N2O from leaching and runoff.

      :returns: The emissions factor for indirect N2O from leaching and runoff.
      :rtype: float


   .. py:method:: get_ef_TAN_house_liquid()

      Get the emissions factor for TAN house liquid storage housing stage.

      :returns: The emissions factor for TAN house liquid storage housing stage.
      :rtype: float


   .. py:method:: get_ef_TAN_house_solid()

      Get the emissions factor for TAN house solid storage housing stage.

      :returns: The emissions factor for TAN house solid storage housing stage.
      :rtype: float


   .. py:method:: get_ef_TAN_storage_tank()

      Get the emissions factor for TAN storage tank.

      :returns: The emissions factor for TAN storage tank.
      :rtype: float


   .. py:method:: get_ef_TAN_storage_solid()

      Get the emissions factor for TAN storage solid.

      :returns: The emissions factor for TAN storage solid.
      :rtype: float


   .. py:method:: get_ef_mcf_liquid_tank()

      Get the emissions factor for MCF liquid tank.

      :returns: The emissions factor for MCF liquid tank.
      :rtype: float


   .. py:method:: get_ef_mcf_solid_storage()

      Get the emissions factor for MCF solid storage.

      :returns: The emissions factor for MCF solid storage.
      :rtype: float


   .. py:method:: get_ef_mcf_anaerobic_digestion()

      Get the emissions factor for MCF anaerobic digestion.

      :returns: The emissions factor for MCF anaerobic digestion.
      :rtype: float


   .. py:method:: get_ef_n2o_direct_storage_tank_liquid()

      Get the emissions factor for N2O direct storage tank liquid.

      :returns: The emissions factor for N2O direct storage tank liquid.
      :rtype: float


   .. py:method:: get_ef_n2o_direct_storage_tank_solid()

      Get the emissions factor for N2O direct storage tank solid.

      :returns: The emissions factor for N2O direct storage tank solid.
      :rtype: float


   .. py:method:: get_ef_n2o_direct_storage_solid()

      Get the emissions factor for N2O direct storage solid.

      :returns: The emissions factor for N2O direct storage solid.
      :rtype: float


   .. py:method:: get_ef_n2o_direct_storage_tank_anaerobic_digestion()

      Get the emissions factor for N2O direct storage tank anaerobic digestion.

      :returns: The emissions factor for N2O direct storage tank anaerobic digestion.
      :rtype: float


   .. py:method:: get_ef_nh3_daily_spreading_none()

      Get the emissions factor for NH3 daily spreading none.

      :returns: The emissions factor for NH3 daily spreading none.
      :rtype: float


   .. py:method:: get_ef_nh3_daily_spreading_manure()

      Get the emissions factor for NH3 daily spreading manure.

      :returns: The emissions factor for NH3 daily spreading manure.
      :rtype: float


   .. py:method:: get_ef_nh3_daily_spreading_broadcast()

      Get the emissions factor for NH3 daily spreading broadcast.

      :returns: The emissions factor for NH3 daily spreading broadcast.
      :rtype: float


   .. py:method:: get_ef_nh3_daily_spreading_injection()

      Get the emissions factor for NH3 daily spreading injection.

      :returns: The emissions factor for NH3 daily spreading injection.
      :rtype: float


   .. py:method:: get_ef_nh3_daily_spreading_traling_hose()

      Get the emissions factor for NH3 daily spreading trailing hose.

      :returns: The emissions factor for NH3 daily spreading trailing hose.
      :rtype: float


   .. py:method:: get_ef_urea()

      Get the emissions factor for urea.

      :returns: The emissions factor for urea.
      :rtype: float


   .. py:method:: get_ef_urea_and_nbpt()

      Get the emissions factor for urea and NBPT.

      :returns: The emissions factor for urea and NBPT.
      :rtype: float


   .. py:method:: get_ef_fracGASF_urea_fertilisers_to_nh3_and_nox()

      Get the emissions factor for urea fertilisers to NH3 and NOx.

      :returns: The emissions factor for urea fertilisers to NH3 and NOx.
      :rtype: float


   .. py:method:: get_ef_fracGASF_urea_and_nbpt_to_nh3_and_nox()

      Get the emissions factor for urea and NBPT to NH3 and NOx.

      :returns: The emissions factor for urea and NBPT to NH3 and NOx.
      :rtype: float


   .. py:method:: get_ef_frac_leach_runoff()

      Get the fraction of leaching and runoff.

      :returns: The fraction of leaching and runoff.
      :rtype: float


   .. py:method:: get_ef_ammonium_nitrate()

      Get the emissions factor for ammonium nitrate.

      :returns: The emissions factor for ammonium nitrate.
      :rtype: float


   .. py:method:: get_ef_fracGASF_ammonium_fertilisers_to_nh3_and_nox()

      Get the emissions factor for ammonium fertilisers to NH3 and NOx.

      :returns: The emissions factor for ammonium fertilisers to NH3 and NOx.
      :rtype: float


   .. py:method:: get_ef_Frac_P_Leach()

      Get the fraction of phosphorus leaching.

      :returns: The fraction of phosphorus leaching.
      :rtype: float


   .. py:method:: get_ef_urea_co2()

      Get the co2 emissions factor for urea.

      :returns: The co2 emissions factor for urea.
      :rtype: float


   .. py:method:: get_ef_lime_co2()

      Get the co2 emissions factor for lime.

      :returns: The co2 emissions factor for lime.
      :rtype: float


   .. py:method:: get_data()

      Get the DataFrame containing the emissions factors data.

      :returns: The DataFrame containing the emissions factors data.
      :rtype: pandas.DataFrame


   .. py:method:: is_loaded()

      Check if the emissions factors data has been successfully loaded.

      :returns: True if the data has been loaded, False otherwise.
      :rtype: bool



.. py:class:: Grass(data)


   Bases: :py:obj:`object`

   Represents the data and functionality related to various types of grass.

   .. attribute:: data_frame

      A DataFrame containing grass data.

      :type: pandas.DataFrame

   .. attribute:: grasses

      A dictionary storing information for each grass genus,
      including its forage dry matter digestibility, crude protein,
      and gross energy values.

      :type: dict

   .. method:: average(property)

      Calculates the average value of a specified property
      (e.g., dry matter digestibility) across all grasses.

   .. method:: get_forage_dry_matter_digestibility(forage)

      Returns the dry matter
      digestibility for a given forage.

   .. method:: get_crude_protein(forage)

      Returns the crude protein value for a given forage.

   .. method:: get_gross_energy_mje_dry_matter(forage)

      Returns the gross energy (in MJ per
      dry matter) for a given forage.

   .. method:: get_data()

      Returns the original data frame used to create the instance.

   .. method:: is_loaded()

      Checks whether the data frame is loaded successfully.
      

   .. py:method:: average(property)


   .. py:method:: get_forage_dry_matter_digestibility(forage)

      Get the dry matter digestibility for a given forage.

      :param forage: The name of the forage.
      :type forage: str

      :returns: The dry matter digestibility for the specified forage.
      :rtype: float


   .. py:method:: get_crude_protein(forage)

      Get the crude protein value for a given forage.

      :param forage: The name of the forage.
      :type forage: str

      :returns: The crude protein value for the specified forage.
      :rtype: float


   .. py:method:: get_gross_energy_mje_dry_matter(forage)

      Get the gross energy (in MJ per dry matter) for a given forage.

      :param forage: The name of the forage.
      :type forage: str

      :returns: The gross energy for the specified forage.
      :rtype: float


   .. py:method:: get_data()

      Get the DataFrame containing the grass data.

      :returns: The DataFrame containing the grass data.
      :rtype: pandas.DataFrame


   .. py:method:: is_loaded()

      Check if the grass data has been successfully loaded.

      :returns: True if the data has been loaded, False otherwise.
      :rtype: bool



.. py:class:: Concentrate(data)


   Bases: :py:obj:`object`

   Represents the data and functionality related to various types of animal feed concentrates.

   .. attribute:: data_frame

      A DataFrame containing concentrate data.

      :type: pandas.DataFrame

   .. attribute:: concentrates

      A dictionary storing information for each type of concentrate,
      including its dry matter digestibility, digestible energy, crude protein,
      gross energy, CO2 equivalents, and PO4 equivalents.

      :type: dict

   .. method:: average(property)

      Calculates the average value of a specified property (e.g., dry matter digestibility)
      across all concentrates.

   .. method:: get_con_dry_matter_digestibility(concentrate)

      Returns the dry matter digestibility for a given concentrate.

   .. method:: get_con_digestible_energy(concentrate)

      Returns the digestible energy proportion for a given concentrate.

   .. method:: get_con_crude_protein(concentrate)

      Returns the crude protein value for a given concentrate.

   .. method:: get_gross_energy_mje_dry_matter(concentrate)

      Returns the gross energy (in MJ per dry matter) for a given concentrate.

   .. method:: get_con_co2_e(concentrate)

      Returns the CO2 equivalents for a given concentrate.

   .. method:: get_con_po4_e(concentrate)

      Returns the PO4 equivalents for a given concentrate.

   .. method:: get_data()

      Returns the original data frame used to create the instance.

   .. method:: is_loaded()

      Checks whether the data frame is loaded successfully.
      

   .. py:method:: average(property)


   .. py:method:: get_con_dry_matter_digestibility(concentrate)

      Get the dry matter digestibility for a given concentrate.

      :param concentrate: The name of the concentrate.
      :type concentrate: str

      :returns: The dry matter digestibility for the specified concentrate.
      :rtype: float


   .. py:method:: get_con_digestible_energy(concentrate)

      Get the digestible energy proportion for a given concentrate.

      :param concentrate: The name of the concentrate.
      :type concentrate: str

      :returns: The digestible energy proportion for the specified concentrate.
      :rtype: float


   .. py:method:: get_con_crude_protein(concentrate)

      Get the crude protein value for a given concentrate.

      :param concentrate: The name of the concentrate.
      :type concentrate: str

      :returns: The crude protein value for the specified concentrate.
      :rtype: float


   .. py:method:: get_gross_energy_mje_dry_matter(concentrate)

      Get the gross energy (in MJ per dry matter) for a given concentrate.

      :param concentrate: The name of the concentrate.
      :type concentrate: str

      :returns: The gross energy for the specified concentrate.
      :rtype: float


   .. py:method:: get_con_co2_e(concentrate)

      Get the CO2 equivalents for a given concentrate.

      :param concentrate: The name of the concentrate.
      :type concentrate: str

      :returns: The CO2 equivalents for the specified concentrate.
      :rtype: float


   .. py:method:: get_con_po4_e(concentrate)

      Get the PO4 equivalents for a given concentrate.

      :param concentrate: The name of the concentrate.
      :type concentrate: str

      :returns: The PO4 equivalents for the specified concentrate.
      :rtype: float


   .. py:method:: get_data()

      Get the DataFrame containing the concentrate data.

      :returns: The DataFrame containing the concentrate data.
      :rtype: pandas.DataFrame


   .. py:method:: is_loaded()

      Check if the concentrate data has been successfully loaded.

      :returns: True if the data has been loaded, False otherwise.
      :rtype: bool



.. py:class:: Upstream(data)


   Bases: :py:obj:`object`

   Represents upstream data for various inputs in an agricultural context.

   .. attribute:: data_frame

      A DataFrame containing upstream data.

      :type: pandas.DataFrame

   .. attribute:: upstream

      A dictionary storing upstream data for each type,
      including functional units, CO2 equivalents, PO4 equivalents,
      SO2 equivalents, net calorific value, and antimony equivalents.

      :type: dict

   .. method:: get_upstream_fu(upstream)

      Returns the functional unit for a given upstream type.

   .. method:: get_upstream_kg_co2e(upstream)

      Returns the kg of CO2 equivalents for a given upstream type.

   .. method:: get_upstream_kg_po4e(upstream)

      Returns the kg of PO4 equivalents for a given upstream type.

   .. method:: get_upstream_kg_so2e(upstream)

      Returns the kg of SO2 equivalents for a given upstream type.

   .. method:: get_upstream_mje(upstream)

      Returns net calorific value in MJ for a given upstream type.

   .. method:: get_upstream_kg_sbe(upstream)

      Returns the kg of antimony equivalents for a given upstream type.

   .. method:: get_data()

      Returns the original data frame from which the upstream data is derived.

   .. method:: is_loaded()

      Checks whether the data frame is loaded successfully.
      

   .. py:method:: get_upstream_fu(upstream)

      Get the functional unit for a given upstream type.

      :param upstream: The name of the upstream type.
      :type upstream: str

      :returns: The functional unit for the specified upstream type.
      :rtype: float


   .. py:method:: get_upstream_kg_co2e(upstream)

      Get the kg of CO2 equivalents for a given upstream type.

      :param upstream: The name of the upstream type.
      :type upstream: str

      :returns: The kg of CO2 equivalents for the specified upstream type.
      :rtype: float


   .. py:method:: get_upstream_kg_po4e(upstream)

      Get the kg of PO4 equivalents for a given upstream type.

      :param upstream: The name of the upstream type.
      :type upstream: str

      :returns: The kg of PO4 equivalents for the specified upstream type.
      :rtype: float


   .. py:method:: get_upstream_kg_so2e(upstream)

      Get the kg of SO2 equivalents for a given upstream type.

      :param upstream: The name of the upstream type.
      :type upstream: str

      :returns: The kg of SO2 equivalents for the specified upstream type.
      :rtype: float


   .. py:method:: get_upstream_mje(upstream)

      Get the net calorific value in MJ for a given upstream type.

      :param upstream: The name of the upstream type.
      :type upstream: str

      :returns: The net calorific value in MJ for the specified upstream type.
      :rtype: float


   .. py:method:: get_upstream_kg_sbe(upstream)

      Get the kg of antimony equivalents for a given upstream type.

      :param upstream: The name of the upstream type.
      :type upstream: str

      :returns: The kg of antimony equivalents for the specified upstream type.
      :rtype: float


   .. py:method:: get_data()

      Get the DataFrame containing the upstream data.

      :returns: The DataFrame containing the upstream data.
      :rtype: pandas.DataFrame


   .. py:method:: is_loaded()

      Check if the upstream data has been successfully loaded.

      :returns: True if the data has been loaded, False otherwise.
      :rtype: bool



.. py:function:: load_grass_data()

   Load the grass data.

   :returns: An instance of the Grass class containing the grass data.
   :rtype: Grass


.. py:function:: load_concentrate_data()

   Load the concentrate data.

   :returns: An instance of the Concentrate class containing the concentrate data.
   :rtype: Concentrate


.. py:function:: load_upstream_data()

   Load the upstream data.

   :returns: An instance of the Upstream class containing the upstream data.
   :rtype: Upstream


.. py:function:: load_emissions_factors_data()

   Load the emissions factors data.

   :returns: An instance of the EmissionsFactors class containing the emissions factors data.
   :rtype: EmissionsFactors


.. py:function:: load_animal_features_data()

   Load the animal features data.

   :returns: An instance of the AnimalFeatures class containing the animal features data.
   :rtype: AnimalFeatures


.. py:function:: load_farm_data(farm_data_frame)

   Load the farm data.

   :param farm_data_frame: The DataFrame containing the farm data.
   :type farm_data_frame: pandas.DataFrame

   :returns: A dictionary containing the farm data.
   :rtype: dict


.. py:function:: load_livestock_data(animal_data_frame)

   Load the livestock data.

   :param animal_data_frame: The DataFrame containing the livestock data.
   :type animal_data_frame: pandas.DataFrame

   :returns: A dictionary containing the livestock data.
   :rtype: dict


.. py:function:: print_livestock_data(data)

   Print the livestock data.

   :param data: A dictionary containing the livestock data.
   :type data: dict


