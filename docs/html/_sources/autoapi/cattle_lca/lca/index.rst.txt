:py:mod:`cattle_lca.lca`
========================

.. py:module:: cattle_lca.lca

.. autoapi-nested-parse::

   Cattle LCA Module
   ------------------

   This module contains classes and methods for calculating the environmental impact of cattle farming, including energy requirements,
   emissions, and waste management. It covers various stages of cattle lifecycle and farm operations such as grazing, housing, manure management, and fertilization practices. The module aims to provide a comprehensive assessment tool for understanding and reducing the environmental footprint associated with cattle production.

   The module includes detailed assessments of greenhouse gas emissions, eutrophication potential, air quality impacts, and resource usage to support sustainable farming practices and decision-making. By integrating data from various sources and applying region-specific emission factors, the module helps in evaluating the overall environmental performance of cattle farms.

   Key Features:
   - Calculation of energy consumption and efficiency in cattle farming.
   - Estimation of greenhouse gas emissions from enteric fermentation, manure management, and other farm activities.
   - Assessment of nutrient runoff and its impact on eutrophication.
   - Evaluation of ammonia emissions and their contribution to air quality issues.
   - Analysis of upstream impacts related to feed production, fertilizer use, and other inputs.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cattle_lca.lca.Energy
   cattle_lca.lca.GrassFeed
   cattle_lca.lca.GrazingStage
   cattle_lca.lca.HousingStage
   cattle_lca.lca.StorageStage
   cattle_lca.lca.DailySpread
   cattle_lca.lca.FertiliserInputs
   cattle_lca.lca.Upstream
   cattle_lca.lca.Allocation
   cattle_lca.lca.ClimateChangeTotals
   cattle_lca.lca.EutrophicationTotals
   cattle_lca.lca.AirQualityTotals




.. py:class:: Energy(ef_country)


   Represents the calculations for various energy needs and intakes for animals based on their cohort,
   diet, and physiological state. It utilizes a series of equations from the IPCC 2006 guidelines and other
   resources to estimate the energy required for maintenance, growth, lactation, and pregnancy, as well as
   the energy provided by forage and concentrates.

   .. attribute:: data_manager_class

      An instance of LCADataManager initialized with a specific ef_country,
      used to access various parameters and energy factors needed for calculations.

      :type: LCADataManager

   .. method:: ratio_of_net_energy_maintenance(animal)

      Calculates the ratio of net energy available for maintenance.

   .. method:: ratio_of_net_energy_growth(animal)

      Calculates the ratio of net energy available for growth.

   .. method:: net_energy_for_maintenance(animal)

      Calculates the net energy required for maintaining basic physiological functions.

   .. method:: net_energy_for_activity(animal)

      Calculates the additional net energy required for animal activities based on grazing type.

   .. method:: net_energy_for_weight_gain(animal)

      Calculates the net energy required for animal growth.

   .. method:: net_energy_for_lactation(animal)

      Calculates the net energy required for lactation.

   .. method:: net_energy_for_pregnancy(animal)

      Calculates the net energy required during pregnancy.

   .. method:: gross_energy_from_concentrate(animal)

      Calculates the total gross energy intake from concentrates.

   .. method:: gross_energy_from_grass(animal)

      Estimates the total gross energy intake from grasses, adjusted for energy intake from concentrates.

   .. method:: total_gross_energy(animal)

      Estimates the total gross energy intake from all sources.
      

   .. note::

      This class requires detailed data about the animal cohorts, their diets, and physiological states to perform accurate calculations.
      These calculations are based on standards provided by IPCC guidelines and other agricultural research sources.

   .. py:method:: ratio_of_net_energy_maintenance(animal)

      Calculates the Ratio of Net Energy Maintenance (REM) to the total digestible energy consumed by the animal.
      This ratio helps in understanding how much of the energy consumed is being used for maintenance activities.

      Parameters:
      ----------
      animal : Animal object
          The animal for which the REM is being calculated. The animal object should contain the forage type being consumed.

      Returns:
      -------
      float
          The ratio of net energy available for maintenance compared to the total energy consumed.

      Notes:
      -----
      The digestible energy (DE) from the forage type input into the animal and farm data is used to calculate the REM.


   .. py:method:: ratio_of_net_energy_growth(animal)

      Calculates the Ratio of Net Energy Growth (REG) to the total digestible energy consumed by the animal.
      This ratio is essential for understanding how much of the energy consumed is utilized for growth purposes.

      Parameters:
      ----------
      animal : Animal object
          The animal cohort type from the animal input data.

      Returns:
      -------
      float
          The ratio of net energy available for growth compared to the total energy consumed.

      Notes:
      -----
      The digestible energy (DE) from the forage type input into the animal and farm data is used to calculate the REG.


   .. py:method:: net_energy_for_maintenance(animal)

      Calculates the net energy required for maintenance based on the animal's weight.
      This involves activities that include basic physiological functions such as respiration, circulation, and maintaining body temperature.

      Parameters:
      ----------
      animal : Animal object
          The animal for which the energy for maintenance is being calculated.

      Returns:
      -------
      float
          The net energy required for maintenance activities, based on the animal's weight.

      Notes:
      -----
      This calculation follows equation 10.3 from the IPCC 2006 guidelines (NEm).


   .. py:method:: net_energy_for_activity(animal)

      Calculates the net energy required for activities, based on the type of feeding situation (grazing type).
      This includes the energy required for movements and other physical activities other than those for basic maintenance.

      Parameters:
      ----------
      animal : Animal object
          The animal for which the energy for activity is being calculated.

      Returns:
      -------
      float
          The net energy required for activities.

      Notes:
      -----
      This uses the net energy for maintenance, multiplied by the coefficient for the animal's specific feed situation.


   .. py:method:: net_energy_for_weight_gain(animal)

      Calculates the net energy required for weight gain, tailored to the animal's specific weight gain rate and physiological state.

      Parameters:
      ----------
      animal : Animal object
          The animal for which the energy for weight gain is being calculated.

      Returns:
      -------
      float
          The net energy required for weight gain.

      Notes:
      -----
      Utilizes equation 10.6 from the IPCC 2006 guidelines (NEg) and is parameterized to the animal's daily weight gain.


   .. py:method:: net_energy_for_lactation(animal)

      Calculates the energy required for lactation, considering the milk volume and fat content.

      Parameters:
      ----------
      animal : Animal object
          The lactating animal for which the energy for lactation is being calculated.

      Returns:
      -------
      float
          The net energy required for producing milk.

      Notes:
      -----
      Factors in milk density and fat content to compute the required energy for milk production.


   .. py:method:: net_energy_for_pregnancy(animal)

      Calculates the energy required for pregnancy.

      Parameters:
      ----------
      animal : Animal object
          The pregnant animal for which the energy for pregnancy is being calculated.

      Returns:
      -------
      float
          The net energy required for supporting pregnancy.

      Notes:
      -----
      Based on the net energy for maintenance and modified by the emissions factor for pregnancy.


   .. py:method:: gross_energy_from_concentrate(animal)

      Calculates the total gross energy intake from concentrate feeds consumed by the animal.

      Parameters:
      ----------
      animal : Animal object
          The animal for which the energy intake from concentrates is being calculated.

      Returns:
      -------
      float
          The total gross energy intake from concentrates.

      Notes:
      -----
      Accounts for the digestibility and energy content of the concentrate feed type consumed.


   .. py:method:: gross_energy_from_grass(animal)

      Estimates the total gross energy intake from grasses for an animal, after accounting for energy contributions
      from different physiological needs and adjusted for the energy concentrates.

      Parameters:
      ----------
      animal : Animal object
          The animal for which the gross energy intake from grasses is being estimated.

      Returns:
      -------
      float
          The total gross energy intake from grasses, adjusted for the energy already provided by concentrates.

      Notes:
      -----
      The calculation considers digestible energy from forage, energy for maintenance, activity, lactation, pregnancy,
      weight gain, and subtracts the energy intake from concentrates.


   .. py:method:: total_gross_energy(animal)

      Calculates the total gross energy intake for an animal, encompassing all sources of energy including grass and concentrates,
      and accounting for various physiological energy demands.

      Parameters:
      ----------
      animal : Animal object
          The animal for which the total gross energy intake is being estimated.

      Returns:
      -------
      float
          The total gross energy intake, considering all physiological energy needs and sources.

      Notes:
      -----
      This method aggregates the net energy for maintenance, activity, lactation, pregnancy, and weight gain against
      the backdrop of the animal's diet digestibility and respective energy ratios for maintenance and growth.



.. py:class:: GrassFeed(ef_country)


   The GrassFeed class provides methods to calculate various energy-related metrics for animals, specifically focusing on those fed primarily on grass.
   It takes into account the dry matter intake from grass, the proportion of the diet made up of concentrates,
   and methane emissions based on the animal's diet.

   Attributes:
   ----------
   energy_class : Energy
       An instance of the Energy class, used to calculate various energy metrics for the animal.
   data_manager_class : LCADataManager
       An instance of the LCADataManager class, used to access data necessary for energy and emissions calculations.

   Methods:
   -------
   dry_matter_from_grass(animal)
       Calculates the dry matter intake from grasses for an animal, adjusted for the energy intake from concentrates.
   gross_amount_from_con_in_percent(animal, share_in_percent)
       Estimates the total energy intake from concentrates, as a percentage of the animal's total diet.
   ch4_emissions_factor(animal)
       Calculates the methane emissions factor based on the feed intake and methane conversion factors.


   .. py:method:: dry_matter_from_grass(animal)

      Estimates the dry matter intake from grasses for an animal, adjusted for the energy intake from concentrates.

      Parameters:
      ----------
      animal : Animal object
          The animal for which the dry matter intake from grass is being estimated.

      Returns:
      -------
      float
          The total dry matter intake from grasses, after adjusting for the energy provided by concentrates and accounting for different physiological energy needs.

      Notes:
      -----
      The calculation considers net energy for maintenance, activity, lactation, pregnancy, weight gain, and the digestible energy from forage. This method ensures a more accurate estimation of the actual dry matter intake from grass for the specified animal.


   .. py:method:: gross_amount_from_con_in_percent(animal, share_in_percent)

      Estimates the total energy intake from concentrates, as a percentage of the animal's total diet, adjusted for the energy intake from grass.

      Parameters:
      ----------
      animal : Animal object
          The animal for which the energy intake from concentrates is being estimated.
      share_in_percent : float
          The percentage of the diet made up by concentrates.

      Returns:
      -------
      float
          The energy intake from concentrates, expressed as a percentage of the total diet.

      Notes:
      -----
      This method provides an estimate of how much energy the animal is obtaining from concentrates as opposed to grass, helping to balance the diet according to physiological energy demands.


   .. py:method:: ch4_emissions_factor(animal)

      Calculates the methane emissions factor based on the feed intake, specifically the gross energy from concentrates and grasses, and the methane conversion factor associated with the animal's cohort.

      Parameters:
      ----------
      animal : Animal object
          The animal for which the methane emissions factor is being estimated.

      Returns:
      -------
      float
          The methane emissions factor per animal per year, taking into account the animal's total energy intake from all feed sources.




.. py:class:: GrazingStage(ef_country)


   The GrazingStage class calculates various metrics related to the environmental impact of grazing animals.
   This includes the volatile solids excretion rate to pasture, net nitrogen excretion, methane emissions from grazing, ammonia emissions,
   nitrogen and phosphorus leaching, and direct and indirect N2O emissions from pasture.

   Attributes:
   ----------
   energy_class : Energy
       An instance of the Energy class, used for calculations involving energy metrics of animals.
   grass_feed_class : GrassFeed
       An instance of the GrassFeed class, used to calculate energy intake from grasses.
   data_manager_class : LCADataManager
       An instance of the LCADataManager class, used to access data necessary for the calculations.

   Methods:
   -------
   percent_outdoors(animal)
       Calculates the percentage of time an animal spends outdoors based on its time outdoors attribute.
   volatile_solids_excretion_rate_GRAZING(animal)
       Calculates the rate at which volatile solids are excreted to pasture by the animal.
   net_excretion_GRAZING(animal)
       Calculates the net nitrogen excretion per kilogram to pasture by the animal.
   ch4_emissions_for_grazing(animal)
       Estimates the methane emissions from the animal excretion while grazing.
   nh3_emissions_per_year_GRAZING(animal)
       Calculates the total ammonia emissions per year from the animal while grazing.
   Nleach_GRAZING(animal)
       Estimates the amount of nitrogen leached from the pasture due to the grazing animal.
   PLeach_GRAZING(animal)
       Estimates the amount of phosphorus leached from the pasture due to the grazing animal.
   PRP_N2O_direct(animal)
       Calculates the direct nitrous oxide emissions from pasture, range, and paddock due to the grazing animal.
   PRP_N2O_indirect(animal)
       Calculates the indirect nitrous oxide emissions from atmospheric deposition and leaching related to pasture,
       range, and paddock due to the grazing animal.

   .. py:method:: percent_outdoors(animal)

      Calculates the percentage of the day that the animal spends outdoors.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant data such as time spent outdoors.

      Returns:
      -------
      float
          The percentage of the day the animal spends outdoors.


   .. py:method:: volatile_solids_excretion_rate_GRAZING(animal)

      Calculates the volatile solids excretion rate (kg/day) to pasture for grazing animals. This measure
      is an indicator of the amount of waste produced by the animal that can contribute to
      greenhouse gas emissions.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant dietary and physical information.

      Returns:
      -------
      float
          The volatile solids excretion rate to pasture.
          This function calculates Volitile Solids Excretion Rate (kg/day -1) to pasture

      Notes:
      ------
          GEC   = Gross Energy from Concentrates
          GEG   = Gross Energy from grass
          DE    = Percentage of Digestible Energy
          UE    = Urinary Energy
          ASH   = Ash content of manure
          18.45 = conversion factor for dietary GE per kg of dry matter, MJ kg-1.


   .. py:method:: net_excretion_GRAZING(animal)

      Calculates the net nitrogen excretion (kg/day) per kg to pasture. This is a measure of the nitrogen
      that is excreted by grazing animals and can impact soil and water quality.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant dietary and physical information.

      Returns:
      -------
      float
          The net nitrogen excretion rate to pasture.


   .. py:method:: ch4_emissions_for_grazing(animal)

      Calculates the methane emissions for grazing based on the animal's excretion rates and time spent
      outdoors.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant dietary, physical, and grazing information.

      Returns:
      -------
      float
          The annual methane emissions from grazing.


   .. py:method:: nh3_emissions_per_year_GRAZING(animal)

      Calculates the total ammonia emissions per year from grazing animals. Ammonia emissions contribute
      to air quality issues and can lead to nitrogen deposition in ecosystems.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant dietary and physical information.

      Returns:
      -------
      float
          The total ammonia emissions per year from grazing.


   .. py:method:: Nleach_GRAZING(animal)

      Calculates the proportion of nitrogen that is leached from pasture as a result of grazing.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant dietary and physical information.

      Returns:
      -------
      float
          The amount of nitrogen leached from pasture due to grazing.


   .. py:method:: PLeach_GRAZING(animal)

      Calculates the proportion of phosphorus that is leached from pasture as a result of grazing.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant dietary and physical information.

      Returns:
      -------
      float
          The amount of phosphorus leached from pasture due to grazing.


   .. py:method:: PRP_N2O_direct(animal)

      Returns the direct nitrous oxide (N2O) emissions from pasture, range, and paddock (PRP) as a result
      of animal grazing.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant dietary and physical information.

      Returns:
      -------
      float
          The direct N2O emissions from PRP due to grazing.


   .. py:method:: PRP_N2O_indirect(animal)

      Returns indirect nitrous oxide (N2O) emissions from atmospheric deposition and leaching related to
      pasture, range, and paddock (PRP). These indirect emissions contribute to the overall greenhouse gas
      footprint of grazing practices.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant dietary and physical information.

      Returns:
      -------
      float
          The indirect N2O emissions from PRP due to grazing.



.. py:class:: HousingStage(ef_country)


   Represents the housing stage of animals, calculating various emissions and excretion rates
   associated with animals being indoors.

   Attributes:
   ----------
   data_manager_class : LCADataManager
       An instance of LCADataManager to access various data related to livestock and their environmental impacts.
   energy_class : Energy
       An instance of Energy class to access energy-related calculations for livestock.

   Methods:
   -------
   percent_indoors(animal):
       Calculates the percentage of time an animal spends indoors.
   volatile_solids_excretion_rate_HOUSED(animal):
       Calculates the rate of volatile solids excreted by housed animals per day.
   net_excretion_HOUSED(animal):
       Calculates the amount of nitrogen excreted per year by animals while they are housed.
   total_ammonia_nitrogen_nh4_HOUSED(animal):
       Calculates the total ammonia nitrogen excreted per year by housed animals.
   nh3_emissions_per_year_HOUSED(animal):
       Calculates the total ammonia emissions per year from housing.
   HOUSING_N2O_indirect(animal):
       Calculates indirect nitrous oxide emissions from the housing stage.

   .. py:method:: percent_indoors(animal)

      Calculates the percentage of the day that the animal spends indoors including time stabled.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant data such as time spent indoors and stabled.

      Returns:
      -------
      float
          The percentage of the day the animal spends indoors.


   .. py:method:: volatile_solids_excretion_rate_HOUSED(animal)

      Calculates the rate of volatile solids excreted by housed animals per day, considering the energy
      content of their diet and time spent indoors.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant dietary and housing information.

      Returns:
      -------
      float
          The daily rate of volatile solids excretion for housed animals.

      Notes:
      ------
          Volitile Solids Excretion Rate (kg/day -1)
          GEcon = Gross Energy from Concentrates
          GEgrass = Gross Energy from grass
          DE= Percentage of Digestible Energy
          UE = Urinary Energy
          ASH = Ash content of manure
          18.45 = conversion factor for dietary GE per kg of dry matter, MJ kg-1.


   .. py:method:: net_excretion_HOUSED(animal)

      Calculates the amount of nitrogen excreted per year by animals while they are housed, factoring in
      the protein content of their diet and the time they spend indoors.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant dietary and housing information.

      Returns:
      -------
      float
          The annual amount of nitrogen excreted by housed animals.


   .. py:method:: total_ammonia_nitrogen_nh4_HOUSED(animal)

      Calculates the total ammonia nitrogen (TAN NH4) excreted by housed animals.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant excretion information.

      Returns:
      -------
      float
          The total ammonia nitrogen excreted by housed animals.


   .. py:method:: nh3_emissions_per_year_HOUSED(animal)

      Calculates the total ammonia (NH3) emissions per year resulting from animal housing.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant housing and manure management information.

      Returns:
      -------
      float
          The total ammonia emissions per year from animal housing.


   .. py:method:: HOUSING_N2O_indirect(animal)

      Calculates indirect nitrous oxide (N2O) emissions associated with the housing stage of animal
      rearing, considering ammonia emissions and atmospheric deposition.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant housing and emissions information.

      Returns:
      -------
      float
          Indirect N2O emissions resulting from animal housing.



.. py:class:: StorageStage(ef_country)


   Represents the manure storage stage of farm management, calculating various emissions and excretion rates
   associated with the storage of animal waste.

   Attributes:
   ----------
   housing_class : HousingStage
       An instance of HousingStage to access calculations related to the housing phase of animal management.
   data_manager_class : LCADataManager
       An instance of LCADataManager to access various data related to livestock and environmental impacts.

   Methods:
   -------
   net_excretion_STORAGE(animal):
       Calculates the net nitrogen excretion from storage.
   total_ammonia_nitrogen_nh4_STORAGE(animal):
       Calculates the total ammonia nitrogen excreted per year from storage.
   CH4_STORAGE(animal):
       Calculates the methane emissions from manure storage per year.
   STORAGE_N2O_direct(animal):
       Calculates direct nitrous oxide emissions from manure storage.
   nh3_emissions_per_year_STORAGE(animal):
       Calculates the total ammonia emissions per year from manure storage.
   STORAGE_N2O_indirect(animal):
       Calculates indirect nitrous oxide emissions from manure storage.

   .. py:method:: net_excretion_STORAGE(animal)

      Calculates the net nitrogen excretion from manure storage.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant housing information.

      Returns:
      -------
      float
          The net nitrogen excretion from manure storage.


   .. py:method:: total_ammonia_nitrogen_nh4_STORAGE(animal)

      Calculates the total ammonia nitrogen (TAN NH4) excreted per year from manure storage.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant excretion information.

      Returns:
      -------
      float
          The total ammonia nitrogen from manure storage per year.


   .. py:method:: CH4_STORAGE(animal)

      Calculates methane (CH4) emissions from manure storage per year.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant waste management information.

      Returns:
      -------
      float
          Methane emissions from manure storage per year.


   .. py:method:: STORAGE_N2O_direct(animal)

      Calculates direct nitrous oxide (N2O) emissions from manure storage.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant waste management information.

      Returns:
      -------
      float
          Direct N2O emissions from manure storage.


   .. py:method:: nh3_emissions_per_year_STORAGE(animal)

      Calculates total ammonia (NH3) emissions per year resulting from manure storage.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant storage information.

      Returns:
      -------
      float
          Total ammonia emissions per year from manure storage.


   .. py:method:: STORAGE_N2O_indirect(animal)

      Calculates indirect nitrous oxide (N2O) emissions associated with the storage stage of waste management,
      considering ammonia emissions and atmospheric deposition.

      Parameters:
      ----------
      animal : object
          The animal object containing relevant storage information.

      Returns:
      -------
      float
          Indirect N2O emissions resulting from manure storage.



.. py:class:: DailySpread(ef_country)


   A class to calculate the environmental impacts associated with daily manure spreading.
   It addresses various factors such as nitrogen and phosphorus excretion, ammonia emissions,
   and nitrous oxide emissions from spreading manure on fields.

   Attributes:
   ----------
       storage_class (StorageStage): An instance of the StorageStage class to access methods related to manure storage.
       data_manager_class (LCADataManager): An instance of the LCADataManager class to access necessary data and parameters.

   Parameters:
   ----------
       ef_country (str): Environmental factor region identifier to tailor calculations to specific regional data.

   Methods:
   -------
       net_excretion_SPREAD(animal):
           Calculates the net nitrogen excretion from manure storage, accounting for losses.
       total_ammonia_nitrogen_nh4_SPREAD(animal):
           Calculates the total ammonia nitrogen released from daily manure spreading.
       SPREAD_N2O_direct(animal):
           Calculates direct nitrous oxide emissions associated with nitrogen applied to fields through manure spreading.
       nh3_emissions_per_year_SPREAD(animal):
           Calculates ammonia emissions per year resulting from daily manure spreading.
       leach_nitrogen_SPREAD(animal):
           Estimates the proportion of nitrogen that is leached into the environment as a result of manure spreading.
       leach_phospherous_SPREAD(animal):
           Estimates the proportion of phosphorus that is leached into the environment as a result of manure spreading.
       SPREAD_N2O_indirect(animal):
           Calculates indirect nitrous oxide emissions associated with volatilization and leaching due to manure spreading.

   .. py:method:: net_excretion_SPREAD(animal)

      Calculates the net nitrogen excretion (Nex) from manure storage, accounting for losses.

      :param animal: An instance of the Animal class containing relevant data for the animal.
      :type animal: Animal

      :returns: Net nitrogen excretion from storage, used in daily spread.
      :rtype: float


   .. py:method:: total_ammonia_nitrogen_nh4_SPREAD(animal)

      Calculates the total ammonia nitrogen (TAN) released from daily manure spreading.

      :param animal: An instance of the Animal class containing relevant data for the animal.
      :type animal: Animal

      :returns: Total ammonia nitrogen from daily spreading per year.
      :rtype: float


   .. py:method:: SPREAD_N2O_direct(animal)

      Calculates direct nitrous oxide (N2O) emissions associated with nitrogen applied to fields through manure spreading.

      :param animal: An instance of the Animal class containing relevant data for the animal.
      :type animal: Animal

      :returns: Direct N2O emissions from daily spreading.
      :rtype: float


   .. py:method:: nh3_emissions_per_year_SPREAD(animal)

      Calculates ammonia (NH3) emissions per year resulting from daily manure spreading.

      :param animal: An instance of the Animal class containing relevant data for the animal.
      :type animal: Animal

      :returns: Ammonia emissions per year from daily spreading.
      :rtype: float


   .. py:method:: leach_nitrogen_SPREAD(animal)

      Estimates the proportion of nitrogen that is leached into the environment as a result of manure spreading.

      :param animal: An instance of the Animal class containing relevant data for the animal.
      :type animal: Animal

      :returns: Amount of nitrogen leached per year from daily spreading.
      :rtype: float


   .. py:method:: leach_phospherous_SPREAD(animal)

      Estimates the proportion of phosphorus that is leached into the environment as a result of manure spreading.

      :param animal: An instance of the Animal class containing relevant data for the animal.
      :type animal: Animal

      :returns: Amount of phosphorus leached per year from daily spreading.
      :rtype: float


   .. py:method:: SPREAD_N2O_indirect(animal)

      Calculates indirect nitrous oxide (N2O) emissions associated with volatilization and leaching due to manure spreading.

      :param animal: An instance of the Animal class containing relevant data for the animal.
      :type animal: Animal

      :returns: Indirect N2O emissions from daily spreading.
      :rtype: float



.. py:class:: FertiliserInputs(ef_country)


   A class to manage and calculate emissions and other impacts associated with fertiliser application, including urea and ammonium nitrate.

   Attributes:
   ----------
       data_manager_class (LCADataManager): An instance of the LCADataManager class to access necessary data and parameters for emission factors and other related data.

   Parameters:
   ----------
       ef_country (str): The environmental factor region identifier to tailor calculations to specific regional data.


   .. py:method:: urea_N2O_direct(total_urea, total_urea_abated)

      Calculates direct N2O emissions from both standard and abated urea applied to soils.

      :param total_urea: Total amount of urea applied (kg).
      :type total_urea: float
      :param total_urea_abated: Total amount of abated urea applied (kg).
      :type total_urea_abated: float

      :returns: Total direct N2O emissions (kg).
      :rtype: float


   .. py:method:: urea_NH3(total_urea, total_urea_abated)

      Estimates the amount of NH3 volatilized from both standard and abated urea applications.

      :param total_urea: Total amount of urea applied (kg).
      :type total_urea: float
      :param total_urea_abated: Total amount of abated urea applied (kg).
      :type total_urea_abated: float

      :returns: Total NH3 emissions (kg).
      :rtype: float


   .. py:method:: urea_nleach(total_urea, total_urea_abated)

      Calculates the amount of urea and abated urea leached from soils after application.

      :param total_urea: Total amount of urea applied (kg).
      :type total_urea: float
      :param total_urea_abated: Total amount of abated urea applied (kg).
      :type total_urea_abated: float

      :returns: Total leached urea (kg).
      :rtype: float


   .. py:method:: urea_N2O_indirect(total_urea, total_urea_abated)

      Calculates indirect emissions from urea and abated urea application, considering atmospheric deposition and leaching.

      :param total_urea: Total amount of urea applied (kg).
      :type total_urea: float
      :param total_urea_abated: Total amount of abated urea applied (kg).
      :type total_urea_abated: float

      :returns: Total indirect N2O emissions (kg).
      :rtype: float


   .. py:method:: urea_co2(total_urea)

      Calculates the total CO2 emissions resulting from the application of urea.

      :param total_urea: Total amount of urea applied (kg).
      :type total_urea: float

      :returns: Total CO2 emissions (kg).
      :rtype: float


   .. py:method:: lime_co2(total_lime)

      Calculates total CO2 emissions from the application of lime.

      :param total_lime: Total amount of lime applied (kg).
      :type total_lime: float

      :returns: Total CO2 emissions from lime application (kg).
      :rtype: float


   .. py:method:: urea_P_leach(total_urea, total_urea_abated)

      Calculates the amount of phosphorus leached from urea and abated urea application.

      :param total_urea: Total amount of urea applied (kg).
      :type total_urea: float
      :param total_urea_abated: Total amount of abated urea applied (kg).
      :type total_urea_abated: float

      :returns: Total phosphorus leached (kg).
      :rtype: float


   .. py:method:: n_fertiliser_P_leach(total_n_fert)

      Calculates the amount of phosphorus leached due to the application of nitrogen fertilisers.

      :param total_n_fert: Total amount of nitrogen fertiliser applied (kg).
      :type total_n_fert: float

      :returns: Total phosphorus leached due to nitrogen fertiliser application (kg).
      :rtype: float


   .. py:method:: n_fertiliser_direct(total_n_fert)

      Calculates direct N2O emissions resulting from the application of nitrogen fertilisers at field level.

      :param total_n_fert: Total amount of nitrogen fertiliser applied (kg).
      :type total_n_fert: float

      :returns: Total direct N2O emissions from nitrogen fertiliser application (kg).
      :rtype: float


   .. py:method:: n_fertiliser_NH3(total_n_fert)

      Calculates total NH3 emissions resulting from the application of nitrogen fertilisers at field level.

      :param total_n_fert: Total amount of nitrogen fertiliser applied (kg).
      :type total_n_fert: float

      :returns: Total NH3 emissions from nitrogen fertiliser application (kg).
      :rtype: float


   .. py:method:: n_fertiliser_nleach(total_n_fert)

      Calculates the total nitrogen leached from the application of nitrogen fertilisers at field level.

      :param total_n_fert: Total amount of nitrogen fertiliser applied (kg).
      :type total_n_fert: float

      :returns: Total nitrogen leached from nitrogen fertiliser application (kg).
      :rtype: float


   .. py:method:: n_fertiliser_indirect(total_n_fert)

      Calculates the indirect N2O emissions from the use of nitrogen fertilisers, accounting for atmospheric deposition and leaching.

      :param total_n_fert: Total amount of nitrogen fertiliser applied (kg).
      :type total_n_fert: float

      :returns: Total indirect N2O emissions from nitrogen fertiliser application (kg).
      :rtype: float


   .. py:method:: total_fertiliser_N20(total_urea, total_urea_abated, total_n_fert)

      Returns the total N2O emissions, both direct and indirect, from the application of both urea and ammonium nitrate fertilisers.

      :param total_urea: Total amount of urea applied (kg).
      :type total_urea: float
      :param total_urea_abated: Total amount of abated urea applied (kg).
      :type total_urea_abated: float
      :param total_n_fert: Total amount of nitrogen fertiliser applied (kg).
      :type total_n_fert: float

      :returns: Total N2O emissions from all fertiliser applications (kg).
      :rtype: float


   .. py:method:: p_fertiliser_P_leach(total_p_fert)

      Calculates the amount of phosphorus leached due to the application of phosphorus fertilisers.

      :param total_p_fert: Total amount of phosphorus fertiliser applied (kg).
      :type total_p_fert: float

      :returns: Total phosphorus leached from phosphorus fertiliser application (kg).
      :rtype: float



.. py:class:: Upstream(ef_country)


   Handles the calculation of upstream emissions related to concentrate production, diesel usage, and electricity consumption
   for the environmental impact assessment of sheep farming operations. It focuses on CO2 and PO4 emissions from various
   sources including fertiliser production, diesel fuel, and electricity used in farm operations.

   .. attribute:: data_manager_class

      Provides access to necessary data for calculations.

      :type: LCADataManager

   .. method:: co2_from_concentrate_production

      Calculates CO2 emissions from concentrate production for sheep.

   .. method:: po4_from_concentrate_production

      Calculates PO4 emissions from concentrate production for sheep.

   .. method:: diesel_CO2

      Estimates CO2 emissions from diesel fuel usage.

   .. method:: diesel_PO4

      Estimates PO4 emissions from diesel fuel usage.

   .. method:: elec_CO2

      Calculates CO2 emissions from electricity consumption.

   .. method:: elec_PO4

      Calculates PO4 emissions from electricity consumption.

   .. method:: fert_upstream_CO2

      Estimates CO2 emissions from the production of various fertilisers.

   .. method:: fert_upstream_EP

      Estimates PO4 emissions from the production of various fertilisers.
      

   .. py:method:: co2_from_concentrate_production(animal)

      Calculates CO2e emissions from the production of concentrates consumed by the animal cohorts.

      :param animal: An object containing data about different animal cohorts and their concentrate consumption.
      :type animal: object

      :returns: The total CO2e emissions from concentrate production for all animal cohorts (kg/year).
      :rtype: float


   .. py:method:: po4_from_concentrate_production(animal)

      Calculates phosphorus (PO4e) emissions from the production of concentrates consumed by the animal cohorts.

      :param animal: An object containing data about different animal cohorts and their concentrate consumption.
      :type animal: object

      :returns: The total PO4e emissions from concentrate production for all animal cohorts (kg/year).
      :rtype: float


   .. py:method:: diesel_CO2(diesel_kg)

      Calculates CO2e emissions from diesel consumption, including both direct and indirect upstream emissions.

      :param diesel_kg: The amount of diesel consumed (kg).
      :type diesel_kg: float

      :returns: The total CO2e emissions from diesel consumption (kg).
      :rtype: float


   .. py:method:: diesel_PO4(diesel_kg)

      Calculates phosphorus (PO4e) emissions from diesel consumption, including both direct and indirect upstream emissions.

      :param diesel_kg: The amount of diesel consumed (kg).
      :type diesel_kg: float

      :returns: The total PO4e emissions from diesel consumption (kg).
      :rtype: float


   .. py:method:: elec_CO2(elec_kwh)

      Calculates CO2e emissions from electricity consumption.

      :param elec_kwh: The amount of electricity consumed (kWh).
      :type elec_kwh: float

      :returns: The total CO2e emissions from electricity consumption (kg).
      :rtype: float


   .. py:method:: elec_PO4(elec_kwh)

      Calculates phosphorus emissions (PO4e) from electricity consumption.

      :param elec_kwh: The amount of electricity consumed (kWh).
      :type elec_kwh: float

      :returns: The total PO4e emissions from electricity consumption (kg).
      :rtype: float


   .. py:method:: fert_upstream_CO2(total_n_fert, total_urea, total_urea_abated, total_p_fert, total_k_fert, total_lime_fert)

      Calculates the total upstream CO2e emissions from the production of various fertilizers.

      :param total_n_fert: Total nitrogen fertilizer applied (kg).
      :type total_n_fert: float
      :param total_urea: Total urea applied (kg).
      :type total_urea: float
      :param total_urea_abated: Total abated urea applied (kg).
      :type total_urea_abated: float
      :param total_p_fert: Total phosphorus fertilizer applied (kg).
      :type total_p_fert: float
      :param total_k_fert: Total potassium fertilizer applied (kg).
      :type total_k_fert: float
      :param total_lime_fert: Total lime fertilizer applied (kg).
      :type total_lime_fert: float

      :returns: The total upstream CO2e emissions from fertilizer production (kg).
      :rtype: float


   .. py:method:: fert_upstream_EP(total_n_fert, total_urea, total_urea_abated, total_p_fert, total_k_fert, total_lime_fert)

      Calculates the total upstream emissions (PO4e) from the production of various fertilizers.

      :param total_n_fert: Total nitrogen fertilizer applied (kg).
      :type total_n_fert: float
      :param total_urea: Total urea applied (kg).
      :type total_urea: float
      :param total_urea_abated: Total abated urea applied (kg).
      :type total_urea_abated: float
      :param total_p_fert: Total phosphorus fertilizer applied (kg).
      :type total_p_fert: float
      :param total_k_fert: Total potassium fertilizer applied (kg).
      :type total_k_fert: float
      :param total_lime_fert: Total lime fertilizer applied (kg).
      :type total_lime_fert: float

      :returns: The total upstream emissions (PO4e) from fertilizer production (kg).
      :rtype: float



.. py:class:: Allocation


   This class is responsible for calculating the allocations of live weight and milk production
   for various animal cohorts within a farm system. It provides methods to calculate total live
   weight outputs and inputs, convert these weights to energy units, and determine allocation
   factors for milk and meat based on these energy values.

   Methods in this class allow for the calculation of the total output in terms of live weight
   and milk, as well as the conversion of these outputs to energy equivalents for allocation
   purposes.

   .. py:method:: live_weight_output(animal)

      Calculates the total live weight output from all animal cohorts.

      :param animal: An object containing data about different animal cohorts and their live weights and number sold.
      :type animal: object

      :returns: The total live weight output for all animal cohorts (kg).
      :rtype: float


   .. py:method:: live_weight_bought(animal)

      Calculates the total live weight bought for all animal cohorts.

      :param animal: An object containing data about different animal cohorts and their live weights and number bought.
      :type animal: object

      :returns: The total live weight bought for all animal cohorts (kg).
      :rtype: float


   .. py:method:: live_weight_to_mje(animal)

      Converts the total live weight output to Megajoules of energy (MJe).

      :param animal: An object containing data about different animal cohorts.
      :type animal: object

      :returns: The total energy output from live weight for all animal cohorts (MJe).
      :rtype: float


   .. py:method:: milk_to_kg_output(animal)

      Calculates the total milk output in kilograms for dairy cows.

      :param animal: An object containing data about the dairy cow cohort.
      :type animal: object

      :returns: The total milk output for dairy cows (kg/year).
      :rtype: float


   .. py:method:: milk_to_mje(animal)

      Converts the total milk output to Megajoules of energy (MJe).

      :param animal: An object containing data about the dairy cow cohort.
      :type animal: object

      :returns: The total energy output from milk for dairy cows (MJe).
      :rtype: float


   .. py:method:: milk_allocation_factor(animal)

      Calculates the allocation factor for milk based on its energy content compared to the total energy content of milk and meat.

      :param animal: An object containing data about the dairy cow cohort and other animal cohorts contributing to meat production.
      :type animal: object

      :returns: The allocation factor for milk.
      :rtype: float


   .. py:method:: meat_allocation_factor(animal)

      Calculates the allocation factor for meat based on its energy content compared to the total energy content of milk and meat.

      :param animal: An object containing data about the dairy cow cohort and other animal cohorts contributing to meat production.
      :type animal: object

      :returns: The allocation factor for meat.
      :rtype: float



.. py:class:: ClimateChangeTotals(ef_country)


   This class calculates total greenhouse gas emissions associated with various farm activities
   including enteric fermentation, manure management, soil management, and the upstream
   impacts of fuel and feed production. It utilizes data from various other classes to
   accumulate total emissions related to climate change.

   Attributes:
   ----------
       data_manager_class (LCADataManager): Manages lifecycle assessment data.
       grass_feed_class (GrassFeed): Manages grass feed-related calculations.
       grazing_class (GrazingStage): Manages grazing-related calculations.
       spread_class (DailySpread): Manages nutrient spreading-related calculations.
       housing_class (HousingStage): Manages housing-related calculations.
       storage_class (StorageStage): Manages manure storage-related calculations.
       fertiliser_class (FertiliserInputs): Manages fertiliser input-related calculations.
       upstream_class (Upstream): Manages upstream emissions calculations.

   .. py:method:: create_emissions_dictionary(keys)

      Creates a dictionary template for emissions calculations with zero-initialized values.

      :param keys: List of animal cohorts or other categories for emissions calculation.
      :type keys: list

      :returns: A dictionary of dictionaries for organizing emissions data.
      :rtype: dict


   .. py:method:: create_expanded_emissions_dictionary(keys)

      Extends the basic emissions dictionary template with additional categories for more
      detailed emissions calculations.

      :param keys: List of animal cohorts or other categories for detailed emissions calculation.
      :type keys: list

      :returns: An expanded dictionary of dictionaries for organizing detailed emissions data.
      :rtype: dict


   .. py:method:: Enteric_CH4(animal)

      Calculates methane emissions from enteric fermentation for a given animal.

      :param animal: The animal cohort for which emissions are being calculated.
      :type animal: AnimalCategory

      :returns: Total methane emissions from enteric fermentation for the specified animal (kg CH4).
      :rtype: float


   .. py:method:: CH4_enteric_ch4(animal)

      Accumulates total methane emissions from enteric fermentation across all animal cohorts.

      :param animal: Collection of animal cohorts within the farm system.
      :type animal: AnimalCollection

      :returns: Total methane emissions from enteric fermentation across all cohorts (kg CH4).
      :rtype: float


   .. py:method:: CH4_manure_management(animal)

      Calculates methane emissions from manure management for animal cohorts.

      :param animal: Collection of animal cohorts within the farm system.
      :type animal: AnimalCollection

      :returns: Total methane emissions from manure management across all cohorts (kg CH4).
      :rtype: float


   .. py:method:: PRP_Total(animal)

      Calculates the total N2O emissions related to Pasture, Range, and Paddock (PRP) for a given animal.

      :param animal: The animal cohort for which emissions are being calculated.
      :type animal: AnimalCategory

      :returns: Total N2O emissions from PRP for the specified animal.
      :rtype: float


   .. py:method:: Total_N2O_Spreading(animal)

      Calculates the total N2O emissions related to the spreading of manure for a given animal collection.

      :param animal: The animal collection for which emissions are being calculated.
      :type animal: AnimalCategory

      :returns: Total N2O emissions from manure spreading for the specified animal collection.
      :rtype: float


   .. py:method:: Total_storage_N2O(animal)

      Calculates the total N2O emissions related to the storage of manure for a given animal collection.

      :param animal: The animal collection for which emissions are being calculated.
      :type animal: AnimalCategory

      :returns: Total N2O emissions from manure storage for the specified animal collection.
      :rtype: float


   .. py:method:: N2O_total_PRP_N2O_direct(animal)

      Calculates the direct N2O emissions from pasture, range, and paddock for a given animal collection.

      :param animal: The animal cohort collection for which emissions are being calculated.
      :type animal: AnimalCategory

      :returns: Direct N2O emissions from PRP for the specified animal collection.
      :rtype: float


   .. py:method:: N2O_total_PRP_N2O_indirect(animal)

      Calculates the indirect N2O emissions from pasture, range, and paddock for a given animal collection.

      :param animal: The animal cohort collection for which emissions are being calculated.
      :type animal: AnimalCategory

      :returns: Indirect N2O emissions from PRP for the specified animal collection.
      :rtype: float


   .. py:method:: Total_manure_ch4(animal)

      Calculates the total methane emissions related to manure management for a given animal collection.

      :param animal: The animal collection for which emissions are being calculated.
      :type animal: AnimalCategory

      :returns: Total methane emissions from manure management for the specified animal collection.
      :rtype: float


   .. py:method:: CO2_soils_GWP(total_urea, total_lime)

      Calculates the global warming potential from CO2 emissions related to soil management through urea and lime application.

      :param total_urea: Total amount of urea used (kg).
      :type total_urea: float
      :param total_lime: Total amount of lime used (kg).
      :type total_lime: float

      :returns: CO2 emissions from soil management.
      :rtype: float


   .. py:method:: N2O_direct_fertiliser(total_urea, total_urea_abated, total_n_fert)

      Calculates the total direct N2O emissions from urea and ammonium fertilizers.

      :param total_urea: Total amount of urea used (kg).
      :type total_urea: float
      :param total_urea_abated: Total amount of urea with emissions-reducing treatments applied (kg).
      :type total_urea_abated: float
      :param total_n_fert: Total amount of nitrogen fertilizer used (kg).
      :type total_n_fert: float

      :returns: Total direct N2O emissions from fertilizer application.
      :rtype: float


   .. py:method:: N2O_fertiliser_indirect(total_urea, total_urea_abated, total_n_fert)

      Calculates the total indirect N2O emissions from urea and ammonium fertilizers.

      :param total_urea: Total amount of urea used (kg).
      :type total_urea: float
      :param total_urea_abated: Total amount of urea with emissions-reducing treatments applied (kg).
      :type total_urea_abated: float
      :param total_n_fert: Total amount of nitrogen fertilizer used (kg).
      :type total_n_fert: float

      :returns: Total indirect N2O emissions from fertilizer application.
      :rtype: float


   .. py:method:: upstream_and_inputs_and_fuel_co2(diesel_kg, elec_kwh, total_n_fert, total_urea, total_urea_abated, total_p_fert, total_k_fert, total_lime_fert)

      Calculates the total CO2 emissions from various upstream activities and inputs.
      This includes emissions from the use of diesel, electricity, and different types of fertilizers.

      Parameters:
      - diesel_kg: The amount of diesel used, in kilograms.
      - elec_kwh: The amount of electricity consumed, in kilowatt-hours.
      - total_n_fert: The total amount of nitrogen fertilizer used, in kilograms.
      - total_urea: The total amount of urea used, in kilograms.
      - total_urea_abated: The total amount of abated urea (urea treated to reduce emissions) used, in kilograms.
      - total_p_fert: The total amount of phosphorus fertilizer used, in kilograms.
      - total_k_fert: The total amount of potassium fertilizer used, in kilograms.
      - total_lime_fert: The total amount of lime fertilizer used, in kilograms.

      Returns:
      Total CO2 emissions from all specified sources, measured in equivalent kilograms of CO2.


   .. py:method:: co2_from_concentrate_production(animal)

      Calculates the CO2e emissions from the production of concentrates fed to the animal.
      This function looks at the type and amount of concentrate feed and uses predefined emission factors to estimate the CO2e impact.

      Parameters:
      - animal: The animal collection for which the CO2e emissions are being calculated.
      This object should contain the type and amount of concentrate feed consumed.

      Returns:
      The total CO2e emissions from the production of concentrate feed, measured in equivalent kilograms of CO2.




.. py:class:: EutrophicationTotals(ef_country)


   A class responsible for calculating the total eutrophication potential associated with a given farming operation.
   This includes contributions from manure management, soil management, fertiliser application, and upstream processes
   related to feed and fuel production.

   Attributes:
   ----------
       data_manager_class (LCADataManager): An instance of the LCADataManager class to access necessary emission factors and conversion values.
       grazing_class (GrazingStage): An instance of the GrazingStage class to access grazing-related eutrophication contributions.
       housing_class (HousingStage): An instance of the HousingStage class to access housing-related eutrophication contributions.
       storage_class (StorageStage): An instance of the StorageStage class to access storage-related eutrophication contributions.
       spread_class (DailySpread): An instance of the DailySpread class to access spreading-related eutrophication contributions.
       fertiliser_class (FertiliserInputs): An instance of the FertiliserInputs class to access fertiliser-related eutrophication contributions.
       upstream_class (Upstream): An instance of the Upstream class to access upstream-related eutrophication contributions.

   Methods:
   --------
       create_emissions_dictionary(keys): Creates a structured dictionary for tracking eutrophication emissions.
       create_expanded_emissions_dictionary(keys): Creates a more detailed structured dictionary for tracking eutrophication emissions, including upstream processes.
       total_manure_NH3_EP(animal): Calculates the total ammonia emissions from manure management, converted to phosphate equivalents.
       total_fertiliser_soils_NH3_and_LEACH_EP(total_urea, total_urea_abated, total_n_fert): Calculates total ammonia and leaching from fertiliser application to soils, converted to phosphate equivalents.
       total_grazing_soils_NH3_and_LEACH_EP(animal): Calculates total ammonia and leaching from grazing management to soils, converted to phosphate equivalents.
       fertiliser_soils_P_LEACH_EP(total_urea, total_urea_abated, total_n_fert, total_p_fert): Calculates total phosphorus leaching from fertiliser application, contributing to eutrophication.
       grazing_soils_P_LEACH_EP(animal): Calculates total phosphorus leaching from grazing, contributing to eutrophication.
       total_fertilser_soils_EP(total_urea, total_urea_abated, total_n_fert, total_p_fert): Aggregates total eutrophication potential from fertiliser applications to soils.
       total_grazing_soils_EP(animal): Aggregates total eutrophication potential from grazing management.
       upstream_and_inputs_and_fuel_po4(diesel_kg, elec_kwh, total_n_fert, total_urea, total_urea_abated, total_p_fert, total_k_fert, total_lime_fert): Calculates total eutrophication potential from upstream activities and inputs, including fuel and electricity usage.
       po4_from_concentrate_production(animal): Calculates total phosphorus emissions from concentrate production used in animal diets.

   .. py:method:: create_emissions_dictionary(keys)

      Creates a dictionary to store eutrophication emissions data for different categories.

      Parameters:
      -----------
          keys: A list of keys representing different farm activities or emission sources.

      Returns:
      --------
          A dictionary with initialized values for each key and sub-key.


   .. py:method:: create_expanded_emissions_dictionary(keys)

      Creates an expanded dictionary to store detailed eutrophication emissions data.

      :param keys: A list of keys representing different farm activities or emission sources.

      :returns: An expanded dictionary with initialized values for each category and sub-category.


   .. py:method:: total_manure_NH3_EP(animal)

      Calculates total ammonia emissions from manure, converted to equivalent phosphorus, contributing to eutrophication potential.

      :param animal: Animal data object containing manure emission details.

      :returns: Total ammonia emissions from manure management converted to phosphorus equivalent.


   .. py:method:: total_fertiliser_soils_NH3_and_LEACH_EP(total_urea, total_urea_abated, total_n_fert)

      Calculates total ammonia and leaching emissions from fertilizer application, converted to phosphorus equivalent.

      :param total_urea: Total amount of urea applied.
      :param total_urea_abated: Total amount of urea with abatement measures applied.
      :param total_n_fert: Total amount of nitrogen fertilizers applied.

      :returns: Total ammonia and leaching emissions from fertilizers, converted to phosphorus equivalent.


   .. py:method:: total_grazing_soils_NH3_and_LEACH_EP(animal)

      Calculates total ammonia and leaching emissions from grazing soils, converted to phosphorus equivalent.

      :param animal: Animal data object containing grazing information.

      :returns: Total ammonia and leaching emissions from grazing, converted to phosphorus equivalent.


   .. py:method:: fertiliser_soils_P_LEACH_EP(total_urea, total_urea_abated, total_n_fert, total_p_fert)

      Calculates phosphorus leaching from fertilizer application on soils.

      :param total_urea: Total amount of urea applied.
      :param total_urea_abated: Total amount of urea with abatement measures applied.
      :param total_n_fert: Total amount of nitrogen fertilizers applied.
      :param total_p_fert: Total amount of phosphorus fertilizers applied.

      :returns: Total phosphorus leaching from fertilizers application.


   .. py:method:: grazing_soils_P_LEACH_EP(animal)

      Calculates phosphorus leaching from grazing soils.

      :param animal: Animal data object containing grazing information.

      :returns: Total phosphorus leaching from grazing activities.


   .. py:method:: total_fertilser_soils_EP(total_urea, total_urea_abated, total_n_fert, total_p_fert)

      Calculates total eutrophication potential from fertilizer application on soils.

      :param total_urea: Amounts of different fertilizers applied.
      :param total_urea_abated: Amounts of different fertilizers applied.
      :param total_n_fert: Amounts of different fertilizers applied.
      :param total_p_fert: Amounts of different fertilizers applied.

      :returns: Total eutrophication potential from fertilizer application.


   .. py:method:: total_grazing_soils_EP(animal)

      Calculates total eutrophication potential from grazing soils.

      :param animal: Animal data object containing grazing information.

      :returns: Total eutrophication potential from grazing activities.


   .. py:method:: upstream_and_inputs_and_fuel_po4(diesel_kg, elec_kwh, total_n_fert, total_urea, total_urea_abated, total_p_fert, total_k_fert, total_lime_fert)

      Calculates total phosphorus emissions from upstream activities, inputs, and fuel related to livestock production.

      :param diesel_kg: Quantities of inputs used.
      :param elec_kwh: Quantities of inputs used.
      :param total_n_fert: Quantities of inputs used.
      :param total_urea: Quantities of inputs used.
      :param total_urea_abated: Quantities of inputs used.
      :param total_p_fert: Quantities of inputs used.
      :param total_k_fert: Quantities of inputs used.
      :param total_lime_fert: Quantities of inputs used.

      :returns: Total phosphorus emissions from upstream activities.


   .. py:method:: po4_from_concentrate_production(animal)

      Calculates the total phosphorus emissions (PO4 equivalent) resulting from the production of concentrate feeds used in animal diet.
      This method considers the entire lifecycle of concentrate production including the acquisition of raw materials, processing, and transportation.

      :param animal: An object representing the animal cohort, containing data related to the type and amount of concentrate consumed.

      :returns: The total phosphorus emissions (PO4 equivalent) from concentrate production for the given animal cohort over a specified period, contributing to the eutrophication potential of the system.



.. py:class:: AirQualityTotals(ef_country)


   This class calculates the total ammonia (NH3) emissions contributing to air quality impacts from various farm management practices including manure management, soil management, and fertilization strategies. The calculations are based on the lifecycle of animal cohorts and their feed, manure handling practices, as well as fertiliser application rates.

   Attributes:
   ----------
       data_manager_class (LCADataManager): A class instance that provides access to necessary emission factors and data specific to a given country or region.
       grazing_class (GrazingStage): A class instance to calculate emissions from grazing practices.
       housing_class (HousingStage): A class instance to calculate emissions from animal housing practices.
       storage_class (StorageStage): A class instance to calculate emissions from manure storage practices.
       spread_class (DailySpread): A class instance to calculate emissions from manure spreading practices.
       fertiliser_class (FertiliserInputs): A class instance to calculate emissions from fertiliser application.

   .. py:method:: create_emissions_dictionary(keys)

      Creates a nested dictionary structure to store NH3 emission values from various sources categorized by specific keys (e.g., animal types).

      :param keys: A list of string keys representing different emission categories or animal types.
      :type keys: list

      :returns: A nested dictionary structured to hold emission values.
      :rtype: dict


   .. py:method:: total_manure_NH3_AQ(animal)

      Calculates total NH3 emissions from manure management practices for the specified animal collection.

      :param animal: An instance representing a specific animal collection.
      :type animal: Animal

      :returns: Total NH3 emissions (kg) from manure management for the specified animal collection.
      :rtype: float


   .. py:method:: total_fertiliser_soils_NH3_AQ(total_urea, total_urea_abated, total_n_fert)

      Calculates total NH3 emissions from fertiliser application to soils.

      :param total_urea: Total urea fertiliser applied (kg).
      :type total_urea: float
      :param total_urea_abated: Total abated urea fertiliser applied (kg).
      :type total_urea_abated: float
      :param total_n_fert: Total nitrogen fertiliser applied (kg).
      :type total_n_fert: float

      :returns: Total NH3 emissions (kg) from fertiliser application to soils.
      :rtype: float


   .. py:method:: total_grazing_soils_NH3_AQ(animal)

      Calculates total NH3 emissions from soils during grazing for the specified animal collection.

      :param animal: An instance representing a specific animal collection.
      :type animal: Animal

      :returns: Total NH3 emissions (kg) from soils during grazing for the specified animal collection.
      :rtype: float



